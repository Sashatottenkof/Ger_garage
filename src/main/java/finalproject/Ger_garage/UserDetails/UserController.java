package finalproject.Ger_garage.UserDetails;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;


import javassist.NotFoundException;

@Controller

@RequestMapping("user")
public class UserController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	// @ResponseBody means the returned String is the response, not a view name
	// @RequestParam means it is a parameter from the GET or POST request
	
	
	/**
	 * display sign up form for user
	 * @param model
	 * @return
	 */
	@GetMapping("signup")
	public String displayAddUserForm(Model model) {
		model.addAttribute(new User());
		model.addAttribute(Gender.values());
	 return "signup";
	}
	
	/**
	 * sign up a user
	 * @param user
	 * @return
	 */
	@PostMapping("signup")
	public String addUser(@ModelAttribute @Valid User user, Errors errors, Model model) {
		if(errors.hasErrors()) {
			
			return "signup";
		}
			
		userRepository.save(user);
		return "signup";
	}
	
	
	/**
	 * Show user details
	 * @param model
	 * @return
	 * @throws NotFoundException 
	 */
	@GetMapping("details/{id}")
	public String displayUser(@PathVariable("id") Integer id, Model model) throws NotFoundException {

		userRepository.findById(id).ifPresent(user -> model.addAttribute("userId", user));
		return "user";
	}
	
	/**
	 * show update from
	 * @param model
	 * @return
	 */
	@GetMapping("update/{id}")
	public String displayUpdateForm(@PathVariable("id") Integer id, Model model) {
		
		userRepository.findById(id).ifPresent(user -> model.addAttribute("userId", user));
//		model.addAttribute(new User());
		model.addAttribute(Gender.values());
	 return "update-user";
	}
	
	/**
	 * Update user details
	 * @param user
	 * @param errors
	 * @param model
	 * @return
	 */
	@PostMapping("update/{id}")
	public String updateUser( @PathVariable("id") Integer id, @ModelAttribute @Valid User user, Errors errors, Model model) {
		if(errors.hasErrors()) {
			user.setId(id);
			return "user";
		}		
		userRepository.save(user);
		
		return "user";
	}
	
	
	/**
	 * Display all registered users
	 * @param model
	 * @return
	 */
	@GetMapping("users")
	public String  allUsers(Model model) {
		//model.addAttribute("name", "users");
		model.addAttribute("allUsers", userRepository.findAll());
		return "users";
	}
	

	
	/**processed with "form"
	 * delete a user by id
	 * @param id
	 * @return
	 */
	@PostMapping("users")
	public String deleteUser(@RequestParam Integer id) {
		userRepository.deleteById(id);
		
		return "redirect:users";
	}

	
	
	
	
	
	@GetMapping("/user/{id}")
	public User getUser(@PathVariable Integer id) throws NotFoundException {
		Optional<User> user = userRepository.findById(id);
		if (user.isPresent()) {
			return user.get();
		} else {
			throw new NotFoundException("User not found with id " + id);
		}
	}

	@PutMapping("/user/{id}")
	public String updateUser(@RequestBody User user, @PathVariable Integer id) {
		 userRepository.findById(id)
			      .map(oldUser -> {
			    	  oldUser.setFirst_name(user.getFirst_name());
			    	  oldUser.setLast_name(user.getLast_name());
			        return userRepository.save(oldUser);
			      });
		 return "updated";
		 
			   
//		Optional<User> oldUser = userRepository.findById(id);
//		oldUser.get().setFirst_name(user.getFirst_name());
//		userRepository.save(oldUser.get());
//		return "Deleted";
	}

//	@DeleteMapping("/user/{id}")
//	public String deleteUser(@PathVariable Integer id) {
//		userRepository.deleteById(id);
//		return "Deleted";
	
	
	
//	}
//	@GetMapping("users/{id}")
//	public String deleteUser(@PathVariable("id") Integer id) {
//	
//		userRepository.deleteById(id);
//
//		
//		return "redirect:";
//	}
	
//	@PostMapping("/add")
//	public String addUser(@RequestBody User user) {
//		userRepository.save(user);
//		return "Saved";
//	}
	
	

//	@GetMapping("/users")
//	public Iterable<User> getAllUsers() {
//		return userRepository.findAll();
//	}

}
