package finalproject.Ger_garage.Controllers;

import finalproject.Ger_garage.DTO.ParameterDate;
import finalproject.Ger_garage.Models.*;
import finalproject.Ger_garage.Repositories.BookingRepository;
import finalproject.Ger_garage.Service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;


import javax.validation.Valid;
import java.time.LocalDate;
import java.util.List;


@Controller
@RequestMapping("admin")
public class AdminController {


    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private BookingService bookingService;
    @Autowired
    private MechanicService mechanicService;
    @Autowired
    private ItemService itemService;
    @Autowired
    private ParameterDate parameterDate;
    @Autowired
    private AdminService adminService;
    @Autowired
    private UserService userService;

    /**
     * Display all registered users
     *
     * @param model
     * @return
     */
    @GetMapping("users")
    public String allUsers(Model model) {
        //model.addAttribute("name", "users");
        model.addAttribute("allUsers", userService.findAll());
        return "admin/users";
    }

    /**
     * processed with "form"
     * delete a user by id
     *
     * @param id
     * @return
     */
    @PostMapping("users")
    public String deleteUser(@RequestParam Integer id) {
        userService.deleteById(id);
        return "redirect:users";
    }


    /**
     * Displays all bookings
     *
     * @param model
     * @return
     */
    @GetMapping("bookings")
    public String allBookings(Model model) {
        model.addAttribute("bookings", bookingService.findAll());
        model.addAttribute("chosenDate", parameterDate);
        return "admin/bookings";
    }

    /**
     * Diasplays bookings for current month
     *
     * @param model
     * @return
     */
    @GetMapping("thismonth-bookings")
    public String monthBookings(Model model) {
        model.addAttribute("bookings", bookingService.findThisMonthBookings());
        model.addAttribute("chosenDate", parameterDate);
        return "admin/bookings";
    }

    /**
     * Diasplays bookings for current week
     *
     * @param model
     * @return
     */
    @GetMapping("thisweek-bookings")
    public String weekBookings(Model model) {
        model.addAttribute("bookings", bookingService.findThisWeekBookings());
        model.addAttribute("chosenDate", parameterDate);
        return "admin/bookings";
    }

    /**
     * Diasplays bookings for today
     *
     * @param model
     * @return
     */
    @GetMapping("today-bookings")
    public String todayBookings(Model model) {
        model.addAttribute("bookings", bookingService.findTodayBookings());
        model.addAttribute("chosenDate", parameterDate);
        return "admin/bookings";
    }


    /**
     * Diasplays bookings for specific day
     *
     * @param model
     * @return
     */
    @PostMapping("daypicker-bookings")
    public String dayPickerBookings(@ModelAttribute("chosenDate") @Valid ParameterDate parameterDate, Errors errors, Model model) {

        if (errors.hasErrors()) {
            errors.rejectValue("date", null, "You have to choose a day");
            return "admin/bookings";
        }

        LocalDate date = parameterDate.getDate();

        model.addAttribute("chosenDate", parameterDate);
        model.addAttribute("bookings", bookingService.findBookingsOnSpecificDay(date));

        return "admin/bookings";
    }

    /**
     * Display specific booking
     * View can not render Optional format, we have to pars only Object
     *
     * @param id
     * @param model
     * @return
     */
    @GetMapping("booking-details/{id}")
    public String oneBooking(@PathVariable Integer id, Model model) {

        model.addAttribute("booking", bookingService.findById(id));

        model.addAttribute("mechanics", mechanicService.findAll());
        model.addAttribute("items", itemService.findAll());

        return "admin/booking-details";
    }

    /**
     * Updates booking by changing booking status, mechanic, and price
     *
     * @param booking
     * @param errors
     * @param model
     * @return
     */
    @PostMapping("update")
    public String updateBooking(@ModelAttribute("booking") @Valid Booking booking, Errors errors, Model model) {
        // We have to transfer items from old booking since thymeleaf form doesn't submit them

        Booking oldBooking = bookingService.findById(booking.getId());
        Booking newBooking = booking;
        newBooking.setItems(oldBooking.getItems());
// Validate that one mechanic has no more then 4 bookings per day
        if (mechanicService.tooManyBookings(booking) == true) {
            //we have to make sure that when an admin wants to make changes other than assigning mechanic,it won't cause the error
            if (oldBooking.getMechanic() != null) {
                //if the booking already has the same mechanic it will save the changes without any problem
                if (oldBooking.getMechanic().getId().equals(newBooking.getMechanic().getId())) {
                    bookingService.save(newBooking);
                    return "redirect:bookings?updated";
                }
            }
            errors.rejectValue("mechanic.id", null, "One mechanic can't do more than 4 services per day");
        }
        if (errors.hasErrors()) {
            model.addAttribute("mechanics", mechanicService.findAll());
            model.addAttribute("items", itemService.findAll());
            return "admin/booking-details";
        }

        bookingService.save(booking);
        return "redirect:bookings?updated";
    }

    /**
     * adding items to the booking with URL
     *
     * @param bookingId
     * @param itemId
     * @return
     */
    @GetMapping("additem/{bookingId}/{itemId}")
    public String addItems(@PathVariable Integer bookingId, @PathVariable Integer itemId) {
       itemService.addItem(bookingId, itemId);
        return "redirect:../../booking-details/{bookingId}?added";
    }

    /**
     * remove items to the booking with URL
     *
     * @param bookingId
     * @param itemId
     * @return
     */
    @GetMapping("deleteitem/{bookingId}/{itemId}")
    public String deleteItems(@PathVariable Integer bookingId, @PathVariable Integer itemId) {
        itemService.deleteItem(bookingId, itemId);
        return "redirect:../../booking-details/{bookingId}?deleted";
    }


    @GetMapping("calendar")
    public String calendar(Model model) {
//		model.addAttribute("bookings", bookingRepository.findAll());

        return "admin/calendar";
    }

}
